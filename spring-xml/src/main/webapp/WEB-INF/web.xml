<?xml version="1.0" encoding="UTF-8" ?>
<web-app xmlns="http://xmlns.jcp.org/xml/ns/javaee"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/javaee
                      http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd"
         version="4.0">

    <display-name>spring-learning</display-name>
    <description>spring learning application</description>

    <context-param>
        <!-- spring context（root context）初始化会用到，和servlet init-param不同
         init-param:初始化spring dispatcherServlet 的context，为了避免重复加载，可以将servlet的配置文件单独出来
         由此可知spring mvc中有两个bean容器（1.spring root context 2.专门服务与servlet的context）
         -->
        <param-name>contextConfigLocation</param-name>
        <param-value>classpath:spring-context*.xml</param-value>
    </context-param>

    <listener>
        <!-- spring root web 上下文监听器，同时也是spring mvc的启动入口 -->
        <!-- web 容器启动时会执行这个监听器 -->
        <listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>
    </listener>

    <filter>
        <filter-name>characterEncodingFilter</filter-name>
        <filter-class>org.springframework.web.filter.CharacterEncodingFilter</filter-class>
        <init-param>
            <param-name>encoding</param-name>
            <param-value>UTF-8</param-value>
        </init-param>
    </filter>
    <filter-mapping>
        <filter-name>characterEncodingFilter</filter-name>
        <url-pattern>/*</url-pattern>
    </filter-mapping>

    <servlet>
        <servlet-name>dispatcherServlet</servlet-name>
        <servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
        <init-param>
            <!-- 初始化servlet要用到的context，它是作为root context的子容器，
            作用范围应仅限在servlet级别
            1.配置视图解析器
            2.静态资源存放位置
            3.controller -->
            <param-name>contextConfigLocation</param-name>
            <param-value>classpath:spring-servlet.xml</param-value>
        </init-param>
        <!-- 大于等于0：在启动时就会创建这个servlet -->
        <load-on-startup>1</load-on-startup>
    </servlet>
    <!--
    /* ： 是匹配所有的路径包括带后缀的，所以用这个通配时，访问jsp也会被servlet拦截（通过controller转发的时候）
    /：是匹配路径，不包括.jsp ,但是包括其它静态资源例如xx.js ss.jpg (这时就需要mvc的resource来配置了)
    -->
    <!--    <servlet-mapping>-->
    <!--        <servlet-name>dispatcherServlet</servlet-name>-->
    <!--        &lt;!&ndash;        比较传统的方式，对于视图都带上.do后缀&ndash;&gt;-->
    <!--        <url-pattern>*.do</url-pattern>-->
    <!--    </servlet-mapping>-->
    <!--    <servlet-mapping>-->
    <!--        <servlet-name>dispatcherServlet</servlet-name>-->
    <!--        &lt;!&ndash;        rest api 则带上/rest前缀&ndash;&gt;-->
    <!--        <url-pattern>/api/*</url-pattern>-->
    <!--    </servlet-mapping>-->

    <servlet-mapping>
        <servlet-name>dispatcherServlet</servlet-name>
        <url-pattern>/</url-pattern>
    </servlet-mapping>

    <welcome-file-list>
        <welcome-file>/index.jsp</welcome-file>
    </welcome-file-list>
</web-app>